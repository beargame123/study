## **Spring Security**는 Spring 기반의 애플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 Spring 하위 프레임워크이다.

---

### 인증과 인가란?

---

- **인증(Authentication)**
    - 해당 사용자가 본인이 맞는지를 확인하는 절차

- **인가(Authorization)**
    - 인증된 사용자가 요청한 자원에 접근 가능한지를 결정하는 절차

- Spring Security는 기본적으로 인증 절차를 거친 후에 인가 절차를 진행하게 되며, 인가 과정에서 해당 리소스에 대한 접근 권한이 있는지 확인을 하게 됩니다.
- 이러한 인증과 인가를 위해 `Principal` 을 아이디로, `Credential` 을 비밀번호로 사용하는 **Credential 기반의 인증 방식** 을 사용합니다.

- **Principal(접근 주체)**
    - 보호 받는 리소스에 접근하는 대상

- **Credential(비밀번호)**
    - 인증된 사용자가 요청한 자원에 접근 가능한지를 결정하는 절차

---

- **Spring Security의 주요 모듈**
![askldhfluasehr.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/705a543f-e856-4116-81f6-4e5ebc8d00f1/askldhfluasehr.png)

**Authentication**

- `Authentication` 은 현재 접근하는 주체의 정보와 권한을 담는 인터페이스입니다.
- `SecurityContext`에 저장되며, `SecurityContextHolder` 를 통해 `SecurityContext`에 접근하고, `SecurityContext` 를 통해 `Authentication` 에 접근할 수 있습니다.

---

**SecurityContext**

- `Authentication`을 보관하는 역할을 하며, `SecurityContext`를 통해 `Authentication` 객체를 꺼내올 수 있습니다.

---

**SecurityContextHolder**

- `SecurityContextHolder`는 보안 주체의 세부 정보를 포함하여 응용 프로그램의 현재 보안 컨텍스트에 대한 세부 정보가 저장됩니다.

---

**Spring Security에서의 인증 처리 과정**

- `username`과 `password`를 조합해서 `UsernamePasswordAuthenticationToken` 인스턴스를 만듭니다.
- 이 토큰은 검증을 위해 `AuthenticationManager`의 인스턴스로 전달됩니다.
- `AuthenticationManager`는 인증에 성공하면 `Authentication` 인스턴스를 리턴합니다.
- 이 `Authentication` 인스턴스는 `SecurityContextHolder`에 저장됩니다.

---

**UsernamePasswordAuthenticationToken**

- `Authentication`을 `implements`한 `AbstractAuthenticationToken`의 하위 클래스로 `username`이 `Principal`의 역할을 하고, `password`가 `Credential`의 역할을 합니다.
- 첫번째 생성자는 인증 전의 객체를 생성하고, 두번째 생성자는 인증이 완료된 객체를 생성해줍니다.
